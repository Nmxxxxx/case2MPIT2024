
from imports import *
from banner import banner
import re
import random

API_TOKEN = '7999577438:AAF-WBB8_ABAbEa-MhuR-4wTKL3s4xaUUm4' 
GIGACHAT_API_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' 
GIGACHAT_API_KEY = 'YmZlNGMwYWQtM2E0ZS00NzQ3LWIzMzQtZWYxN2NjNTYxODEyOmZjOWQ0ZDNlLTlhMzctNGRiMi1iNTVmLTMzMjYwNmI2MzBjZg=='


logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def db_connect():
    return await aiosqlite.connect('case2giga.db')

reagents = ['–º–∞—Ä—à—Ä—É—Ç', '–ø—É—Ç—å', '–º–∞—Ä—à—É—Ç', '–º—Ä—à—Ä—É—Ç', '–º–∞—Ä—à—Ä—Ç', '–º—Ä—à—Ä—Ç', '–º–∞—Ä—à—Äy—Ç']

async def get_places_from_db():
    db = await db_connect()
    places = []
    try:
        async with db.execute("SELECT name, average_time, tags FROM giga") as cursor:
            async for row in cursor:
                name = row[0].strip().lower()
                average_time = row[1]

                tags = row[2].split(',') if row[2] else []
                tags = [tag.strip() for tag in tags]  

                places.append({
                    'name': name,
                    'average_time': average_time,
                    'tags': tags
                })

                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ: {name}, –≤—Ä–µ–º—è: {average_time}, —Ç–µ–≥–∏: {tags}")

    finally:
        await db.close()

    return places



async def get_gigachat_response(query: str) -> list:
    access_token = get_access_token()
    if not access_token:
        return []
    

    payload = json.dumps({
        "model": "GigaChat",
        "messages": [{"role": "user", "content": query}],
        "stream": False,
        "repetition_penalty": 1
    })

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(GIGACHAT_API_URL, headers=headers, data=payload, ssl=False) as response:
            if response.status == 200:
                json_response = await response.json()
                content = json_response['choices'][0]['message']['content']
                print(f"–û—Ç–≤–µ—Ç –æ—Ç GigaChat: {content}")
                return content
            else:
                logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: %s", await response.text())
                return []

def get_access_token():
    master_token = "YmZlNGMwYWQtM2E0ZS00NzQ3LWIzMzQtZWYxN2NjNTYxODEyOmZjOWQ0ZDNlLTlhMzctNGRiMi1iNTVmLTMzMjYwNmI2MzBjZg=="
    headers = {
        'Authorization': f'Bearer {master_token}',
        'RqUID': str(uuid.uuid4()),
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data = {'scope': 'GIGACHAT_API_CORP'}
    base_url = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth'

    response = requests.post(url=base_url, headers=headers, data=data, verify=False)

    if response.status_code == 200:
        return response.json().get('access_token')
    else:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è access_token: %s", response.text)
        return None

async def get_message_from_gigachat(query: str) -> list:
    access_token = get_access_token()
    if not access_token:
        return []

    payload = json.dumps({
        "model": "GigaChat",
        "messages": [{"role": "user", "content": query}],
        "stream": False,
        "repetition_penalty": 1
    })

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(GIGACHAT_API_URL, headers=headers, data=payload, ssl=False) as response:
            if response.status == 200:
                json_response = await response.json()
                content = json_response['choices'][0]['message']['content']
                print(f"–û—Ç–≤–µ—Ç –æ—Ç GigaChat: {content}")                
                return content
            else:
                logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: %s", await response.text())
                return []


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü
–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! ‚úàÔ∏è –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π:
üåç –ö—É–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?  
üíñ –ö–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã?  
üéâ –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–µ—á—Ç–∞–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?  
–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—Ç –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–º–µ—Å—Ç–µ –≤–∞—à–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üåÖ‚ú®
""")


@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    user_query = message.text
    
    preferences = await get_gigachat_response(user_query)
    await message.answer(preferences)


if __name__ == '__main__':
    print(banner)
    executor.start_polling(dp, skip_updates=True)