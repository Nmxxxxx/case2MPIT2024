from imports import *
from banner import banner
import re
import random
import os

API_TOKEN = '7999577438:AAF-WBB8_ABAbEa-MhuR-4wTKL3s4xaUUm4' 
GIGACHAT_API_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' 
GIGACHAT_API_KEY = 'YmZlNGMwYWQtM2E0ZS00NzQ3LWIzMzQtZWYxN2NjNTYxODEyOmZjOWQ0ZDNlLTlhMzctNGRiMi1iNTVmLTMzMjYwNmI2MzBjZg=='


logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def db_connect():
    return await aiosqlite.connect('case2giga.db')

reagents = ['–º–∞—Ä—à—Ä—É—Ç', '–ø—É—Ç—å', '–º–∞—Ä—à—É—Ç', '–º—Ä—à—Ä—É—Ç', '–º–∞—Ä—à—Ä—Ç', '–º—Ä—à—Ä—Ç', '–º–∞—Ä—à—Äy—Ç', '–ø–ª–∞–Ω', '–ø–ª–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º—É', '–ø—Ä–æ–≥—Ä–∞–º—É', '–ø—Ä–æ–≥—É', '—Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä–∞—Å–ø—Å–∞–Ω–∏–µ' ]
async def get_places_from_db():
    db = await db_connect()  
    places = []
    try:
        async with db.execute("SELECT name, average_time, tags FROM giga") as cursor:
            async for row in cursor:
                name = row[0].strip()  
                average_time = row[1]  
                tags = row[2].split(',') if row[2] else [] 

                places.append({
                    'name': name,
                    'average_time': average_time,
                    'tags': [tag.strip() for tag in tags]  
                })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}") 
    finally:
        await db.close()  
    return places

def extract_days(user_query: str) -> int:
    match = re.search(r'–Ω–∞ (\d+) (–¥–Ω—è|–¥–µ–Ω—å|–¥–Ω–µ–π)', user_query)
    return int(match.group(1)) if match else 1

async def create_itinerary(days: int, preferences: list) -> str:
    total_hours_per_day = 8
    max_places_per_day = 3  
    itinerary = []
    
    if len(preferences) < days:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è."

    random.shuffle(preferences)

    used_places = set()  
    beach_added_today = False  

    for day in range(days):
        available_time = total_hours_per_day
        daily_places = []
        day_total_time = 0

        for place in preferences:
            if place['name'] not in used_places:
                average_time = float(place['average_time'])
                if len(daily_places) < max_places_per_day:
                    if '–ø–ª—è–∂' in place['tags']:
                        if not beach_added_today: 
                            daily_places.append(place)
                            used_places.add(place['name'])

                            available_time -= average_time  
                            day_total_time += average_time  
                            beach_added_today = True 
                        
                    else: 
                        if available_time >= average_time:  
                            daily_places.append(place)
                            used_places.add(place['name'])

                            available_time -= average_time  
                            day_total_time += average_time  
        if daily_places:
            day_itinerary = ', '.join([f"{place['name']} ({place['average_time']}—á)" for place in daily_places])
            daily_tags = '; '.join(['; '.join(place['tags']) for place in daily_places])

            itinerary.append(
                f"üåü **–î–µ–Ω—å {day + 1}** üåü\n\n"
                f"üó∫Ô∏è **–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è:**\n"
                f"{day_itinerary}\n"
                f"**–¢–µ–≥–∏:** {daily_tags}\n"
                f"‚è∞ **–û–±—â–µ–µ –≤—Ä–µ–º—è**: {day_total_time:.1f} —á\n"
            )
        else:
            itinerary.append(f"üåü **–î–µ–Ω—å {day + 1}**: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        beach_added_today = False 

    return "\n".join(itinerary)
def get_access_token():
    master_token = "YmZlNGMwYWQtM2E0ZS00NzQ3LWIzMzQtZWYxN2NjNTYxODEyOmZjOWQ0ZDNlLTlhMzctNGRiMi1iNTVmLTMzMjYwNmI2MzBjZg=="
    headers = {
        'Authorization': f'Bearer {master_token}',
        'RqUID': str(uuid.uuid4()),
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data = {'scope': 'GIGACHAT_API_CORP'}
    base_url = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth'

    response = requests.post(url=base_url, headers=headers, data=data, verify=False)

    if response.status_code == 200:
        return response.json().get('access_token')
    else:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è access_token: %s", response.text)
        return None

async def get_gigachat_response(query: str) -> list:
    access_token = get_access_token()
    if not access_token:
        return []
    

    payload = json.dumps({
        "model": "GigaChat",
        "messages": [{"role": "user", "content": query}],
        "stream": False,
        "repetition_penalty": 1
    })

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(GIGACHAT_API_URL, headers=headers, data=payload, ssl=False) as response:
            if response.status == 200:
                json_response = await response.json()
                content = json_response['choices'][0]['message']['content']
                # print(f"–û—Ç–≤–µ—Ç –æ—Ç GigaChat: {content}")

                database_places = await get_places_from_db()
                print(database_places)
                # preferences = extract_places_from_text(content, database_places)
                
                # print('#'*10)
                # print(preferences)
                # print(f"–ò–∑–≤–ªd–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}")
                return database_places
            else:
                logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: %s", await response.text())
                return []


async def get_message_from_gigachat(query: str) -> list:
    access_token = get_access_token()
    if not access_token:
        return []

    payload = json.dumps({
        "model": "GigaChat",
        "messages": [{"role": "user", "content": query}],
        "stream": False,
        "repetition_penalty": 1
    })

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(GIGACHAT_API_URL, headers=headers, data=payload, ssl=False) as response:
            if response.status == 200:
                json_response = await response.json()
                content = json_response['choices'][0]['message']['content']
                print(f"–û—Ç–≤–µ—Ç –æ—Ç GigaChat: {content}")                
                return content
            else:
                logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: %s", await response.text())
                return []

def extract_places_from_text(text: str, database_places: list) -> list:
    found_places = []
    print(f"–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {text}")

    lines = text.splitlines()

    for line in lines:
        line = line.strip()
        if len(line) > 0:
        
            for place in database_places:  
                place_name = place['name']  
                if place_name in line.lower():  
                    found_places.append(place)  
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {place_name}, –¥–∞–Ω–Ω—ã–µ: {place}")
                    break  

    return found_places

@dp.message_handler(commands=['start', 'restart'])
async def send_welcome(message: types.Message):

    photo_path = os.path.abspath('img/starter.png')  

    
    with open(photo_path, 'rb') as photo:  
        await message.answer_photo(photo=photo, caption="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! ‚úàÔ∏è –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π:

üåç –ö—É–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?  

üíñ –ö–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã?  

üéâ –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–µ—á—Ç–∞–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?  

–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—Ç –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–º–µ—Å—Ç–µ –≤–∞—à–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üåÖ‚ú®
""")
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer("""
        –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n
        –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –°–æ—Å—Ç–∞–≤—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ 5 –¥–Ω–µ–π. 

""")


@dp.message_handler(commands=['get_items'])
async def get_items(message: types.Message):
    db = await db_connect()
    try:
        async with db.execute("SELECT * FROM giga") as cursor:
            items = await cursor.fetchall()
            item_list = "\n".join([f"ID: {item[0]}\n‚óâ –ù–∞–∑–≤–∞–Ω–∏–µ: {item[1]}\n‚óâ –û–ø–∏—Å–∞–Ω–∏–µ: {item[2]}\n‚óâ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ: {item[3]}—á\n‚óâ –¢–µ–≥–∏: {item[4]}\n" for item in items])
            await message.answer(f"–≠–ª–µ–º–µ–Ω—Ç—ã:\n{item_list}" if item_list else "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
    finally:
        await db.close()

@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    user_query = message.text
    if not any(reagent in user_query for reagent in reagents):
        pass
    else:
        days = extract_days(user_query)
        preferences = await get_gigachat_response(user_query)
        itinerary = await create_itinerary(days, preferences)
        await message.answer(itinerary)

if __name__ == '__main__':
    print(banner)
    executor.start_polling(dp, skip_updates=True)